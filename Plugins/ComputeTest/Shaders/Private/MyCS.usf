#pragma once

#include "/Engine/Private/Common.ush"

float boundaryConditions(uint x, uint y, float width, float height )
{
    const float alpha = 0.05f;

    float x0 = float(x) ; float x1 = float(width - x);
    float y0 = float(y) ; float y1 = float(height - y);

    float leftBound, rightBound, topBound, bottomBound;

    leftBound = rightBound = bottomBound = topBound = 0;

    float padX = .1f * width;
    float padY = .1f * height;

    if (x0 >= 0.0f) 
        leftBound = clamp(pow(x0/padX, alpha ),0.0f, 1.0f);
    if (x1 >= 0.0f)
        rightBound = clamp(pow(x1/padX, alpha ),0.0f, 1.0f);
    if (y0 >= 0.0f)
        bottomBound = clamp(pow(y0/padY, alpha),0.0f, 1.0f);
    if (y1 >= 0.0f)
        topBound = clamp(pow(y1/padY, alpha),0.0f, 1.0f);

    return (topBound*bottomBound*rightBound*leftBound);

}

#ifdef ADD_SOURCE_HEIGHTFIELD

#define SRCTYPE float4
#define DSTTYPE float4

#define Texture2DType Texture2D<SRCTYPE>
#define RWTexture2DType RWTexture2D<DSTTYPE>

float4 MyColor;
uint bUseObsMap;
RWTexture2DType OutputSurface;

Texture2DType SrcObstruction;
Texture2DType SrcTexture;
SamplerState TexMapSampler;
RWStructuredBuffer<float4> h0_phi_RW;

float m_Lx;
float m_Ly;

//THREADS_PER_GROUP defined in "ComputeTestImplementation.cpp"
[numthreads(THREADS_PER_GROUP,THREADS_PER_GROUP,1)]
void AddSourceHeightCS(uint3 ThreadId : SV_DispatchThreadID)
{
    float4 dstpixel = MyColor;
    
    int width, height;
    SrcTexture.GetDimensions(width, height);
    uint idx = ThreadId.x  + ThreadId.y * width;
    
    //Calculate boundary conditions
    float bound = boundaryConditions(ThreadId.x, ThreadId.y, width * 1.0, height * 1.0);

    //Calculate obstruction map
    float4 obsHeight = 0.0f;
    if(bUseObsMap){
        obsHeight = clamp(SrcObstruction[ThreadId.xy],0.0f,1.0f) * -h0_phi_RW[idx];
    }

    float LMag = sqrt(m_Lx*m_Lx + m_Ly*m_Ly);

    float2 uv = float2(ThreadId.xy)/ float2(width * 1.0f, height *1.0f);
    float4 output = SrcTexture[ThreadId.xy];
    float4 pixColor = float4(output.x,0.0f,0.0f,0.0f)*CSVariables.mag*CSVariables.deltaTime;
    
    //Apply Obstruction Maps
    h0_phi_RW[idx] += pixColor + obsHeight;
    
    //Apply Boundary Conditions
    h0_phi_RW[idx] *= bound; 
    OutputSurface[ThreadId.xy] = h0_phi_RW[idx]; 

    return;
}

#endif //ADD_SOURCE_HEIGHTFIELD

#ifdef CALC_EWAVE

#define Texture2DType Texture2D<float4>
#define RWTexture2DType RWTexture2D<float4>

#define GRAV 9.80665f
#define PI 3.1415926535897932f

//Grid Size in meters
float worldGridWidth;
float worldGridHeight;

// Complex Texture input. 2 complex signals (h and phi): R + iG , B + iA 
Texture2DType In_hT_pT;

RWTexture2DType Out_hT_pT;


[numthreads(THREADS_PER_GROUP, THREADS_PER_GROUP,1)]
void CalcEWaveCS(uint3 ThreadId : SV_DispatchThreadID)
{

    float width, height;
    In_hT_pT.GetDimensions(width, height);
    
    if ((ThreadId.x >= width) || (ThreadId.y >= height)) { return; }

    uint i = ThreadId.x;
    uint j = ThreadId.y;

    //TODO: Need to implement size of Grid in World Size (Lx, Ly)
    float dkx = 2.0 * PI * 1.0/worldGridWidth; 
    float dky = 2.0 * PI * 1.0/worldGridHeight;

    float kx, ky;
    if( float(i) <= width/2.0) kx = i * dkx;
    else kx = (i - width) * dkx;

    if (float(j) <= height/2.0) ky = j * dky;
    else ky = (j - height) * dky;

    //float n = ThreadId.x - 256.0f;
    //float m = ThreadId.y - 256.0f;
    uint index = i + j*width;
    //kx = 2 * PI * n/ 512.0f;
    //ky = 2 * PI * m/ 512.0f;

    float mk = sqrt(kx*kx + ky*ky);

    float w = sqrt(GRAV*mk);
    float4 ht_pt = In_hT_pT[ThreadId.xy];
    float coswk, sinwk;
    sincos(w*CSVariables.deltaTime, sinwk, coswk);
    float2 hT, pT;
    if (mk != 0)
    {
        hT.x = coswk*ht_pt.r + (mk / w) * sinwk * ht_pt.b; // h.real
        hT.y = coswk*ht_pt.g + (mk / w) * sinwk * ht_pt.a; // h.imag
        
        pT.x = coswk*ht_pt.b - (GRAV / w) * sinwk * ht_pt.r; // phi.real
        pT.y = coswk*ht_pt.a - (GRAV / w) * sinwk * ht_pt.g; // phi.imag

        //Out_hT_pT[ThreadId.xy] = float4(In_hT_pT[ThreadId.xy].x,In_hT_pT[ThreadId.xy].y, 0.0, 0.0 );

        Out_hT_pT[ThreadId.xy] = float4(hT.x,hT.y, pT.x, pT.y);
    }
}

#endif //CALC_EWAVE

#ifdef APPLY_ADVECTION

#define SRCTYPE float4

#define Texture2DType Texture2D<SRCTYPE>

Texture2DType SrcTexture;
Texture2DType FlowMap;
SamplerState SrcSampler;
//RWStructuredBuffer<float4> h0_phi0_RW;
RWTexture2D<float4> h0_phi0_RW;
uint bUseFlowMap;
float velScale;
float m_Lx;
float m_Ly;


[numthreads(THREADS_PER_GROUP, THREADS_PER_GROUP,1)]
void AdvectFieldsCS(uint3 ThreadId : SV_DispatchThreadID)
{
    int width, height;

    SrcTexture.GetDimensions(width, height);
    int idx = ThreadId.x  + ThreadId.y * width;
    
    float4 value = 0.0f;
    if (bUseFlowMap)
    {
        float i = ((float)ThreadId.x);
        float j = ((float)ThreadId.y);

        float u0 = i/((float)width);
        float v0 = j/((float)height);
        float4 vel = 0.0f;
        float4 flowSample = FlowMap.SampleLevel(SrcSampler, float2(u0,v0), 0); // takes the R and G values
        //vel = float4(100.0f,0.0f,0.0f,0.0f);
        vel = float4((flowSample.r - 0.5f)*2.0f, (flowSample.g - 0.5f) * 2.0f, 0.0f,0.0f);
        // TODO: Need to include dx,dy and Lx,Ly in calculation
        float x = i - (vel.r * CSVariables.deltaTime * velScale / m_Lx);
        float y = j - (vel.g * CSVariables.deltaTime * velScale / m_Ly);

        if (x < 0) x = 0.5; if (x >= width) x = width-0.5;
        if (y < 0) y = 0.5; if (y >= height) y = height-0.5;

        float u1 = x/((float)width);
        float v1 = y/((float)height);

         value = SrcTexture.SampleLevel(SrcSampler, float2(u1,v1),0);
         //value = vel;
    }
    else
    {
        value =  SrcTexture[ThreadId.xy];
    }

    //h0_phi0_RW[idx] = value;
    h0_phi0_RW[ThreadId.xy] = value;
}
#endif //APPLY_ADVECTION


#ifdef GEN_GRAD
Texture2D<float4> RO_Ht_PHIt;

RWTexture2D<float4> dx_dy;
RWTexture2D<float4> dPhix_dPhiy;

#define PI 3.1415926535897932f
uint genGrad;
uint calcNonLinear;

float m_Lx;
float m_Ly;

[numthreads(THREADS_PER_GROUP, THREADS_PER_GROUP,1)]
void GenGradCS(uint3 ThreadId : SV_DispatchThreadID)
{
    uint width, height;

    RO_Ht_PHIt.GetDimensions(width, height);
    int idx = ThreadId.x  + ThreadId.y * width;

    uint i = ThreadId.x;
    uint j = ThreadId.y;

    dx_dy[ThreadId.xy] = 0.0;
    dPhix_dPhiy[ThreadId.xy] = 0.0;

    if (!calcNonLinear && !genGrad)
        return;
    
    float2 Ht = RO_Ht_PHIt[ThreadId.xy].rg;
    float2 phi = RO_Ht_PHIt[ThreadId.xy].ba;

    float dkx = 2.0 * PI/m_Lx; 
    float dky = 2.0 * PI/m_Ly;

    float kx, ky;
    if( float(i) <= width/2.0) kx = i * dkx;
    else kx = (i - width) * dkx;

    if (float(j) <= height/2.0) ky = j * dky;
    else ky = (j - height) * dky;

    //kx = ThreadId.x - m_Lx * 0.5f;
    //ky = ThreadId.y - m_Ly * 0.5f;

    float sqr_k = kx*kx + ky*ky;
    float unit_k = 0.0f;
    if(sqr_k > 1e-12f)
    {
        unit_k = 1.0/sqrt(sqr_k);
    }
    kx *= unit_k;
    ky *= unit_k; 

    
    //calcNonLinear = false;


    if(calcNonLinear)
    {
        float2 dPhiX = float2(-phi.y * kx, phi.x * kx);
        float2 dPhiY = float2(-phi.y * ky, phi.x * ky);
        
        dPhix_dPhiy[ThreadId.xy] = float4(dPhiX, dPhiY);
    }

    
    if(genGrad)
    {   
        //rotated by -PI/2. -i(imaginary component) in fourier space is rotation by -PI/2. Hence -i*(a,b) becomes (b,-a).
        float2 dx = float2(Ht.y * kx, -Ht.x * kx);
        float2 dy = float2(Ht.y * ky, -Ht.x * ky);

        dx_dy[ThreadId.xy] = float4(dx,dy);
    }
}

#endif //GEN_GRAD


#ifdef APPLY_FIELDS

Texture2D<float4> SrcTexture;
Texture2D<float4> ObsTexture;
Texture2D<float4> dPhix_dPhiy;
Texture2D<float4> dx_dy;
SamplerState dPhiSampler;

RWTexture2D<float4> DstTexture;
RWStructuredBuffer<float4> h0_phi0_RW;


uint bUseNonLinear;
uint bUseObsTexture;
float advScale;
float m_Lx;
float m_Ly;

[numthreads(THREADS_PER_GROUP, THREADS_PER_GROUP,1)]
void ApplyFieldsCS(uint3 ThreadId : SV_DispatchThreadID)
{
    int width, height;

    SrcTexture.GetDimensions(width, height);
    int idx = ThreadId.x  + ThreadId.y * width;
    float4 obstructedSrc = SrcTexture[ThreadId.xy];
    float4 obs_dx_dy = dx_dy[ThreadId.xy];
    float4 obs_phiX_phiY = dPhix_dPhiy[ThreadId.xy];

    if (bUseNonLinear)
    {
        float i = ((float)ThreadId.x);
        float j = ((float)ThreadId.y);

        float u0 = i/((float)width);
        float v0 = j/((float)height);
        float4 vel = 0.0f;
        float4 dPhi = dPhix_dPhiy.SampleLevel(dPhiSampler, float2(u0,v0), 0); // takes the R and G values
        //vel = float4(100.0f,0.0f,0.0f,0.0f);
        vel = float4((dPhi.r), (dPhi.b), 0.0f,0.0f);
        // TODO: Need to include dx,dy and Lx,Ly in calculation
        float xH = i - (vel.r * CSVariables.deltaTime * advScale / m_Lx);
        float yH = j - (vel.g * CSVariables.deltaTime * advScale / m_Ly);

        if (xH < 0) xH = 0.5; if (xH >= width) xH = width - 0.5;
        if (yH < 0) yH = 0.5; if (yH >= height) yH = height - 0.5;

        float u1 = xH/((float)width);
        float v1 = yH/((float)height);

        float xPhi = i - (vel.r * CSVariables.deltaTime * advScale / m_Lx)*0.5;
        float yPhi = j - (vel.g * CSVariables.deltaTime * advScale / m_Ly)*0.5;
        
        if (xPhi < 0) xPhi = 0.5; if (xPhi >= width) xPhi = width - 0.5 ;
        if (yPhi < 0) yPhi = 0.5; if (yPhi >= height) yPhi = height - 0.5 ;

        float u2 = xPhi/((float)width);
        float v2 = yPhi/((float)height);

        float2 HSample = SrcTexture.SampleLevel(dPhiSampler, float2(u1,v1),0).rg;
        float2 phiSample = SrcTexture.SampleLevel(dPhiSampler, float2(u2,v2),0).ba;
        obstructedSrc = float4(HSample.r, HSample.g, phiSample.r, phiSample.g);
        obs_dx_dy = dx_dy.SampleLevel(dPhiSampler, float2(u1,v1),0);
        //value = vel;

    }

    if (bUseObsTexture)
    {
        float4 obsVal = -ObsTexture[ThreadId.xy] * obstructedSrc;
        obstructedSrc += obsVal;

        float obsGradVal = -ObsTexture[ThreadId.xy] * dx_dy[ThreadId.xy];
        obs_dx_dy += obsGradVal;
    }

    //Calculate boundary conditions
    float bound = boundaryConditions(ThreadId.x, ThreadId.y, width * 1.0, height * 1.0);
    float4 value = 0.0f;

    value = float4(obs_dx_dy.r* bound, obs_dx_dy.b* bound, obstructedSrc.r* bound, 1.0f) ;
    DstTexture[ThreadId.xy] = value;
    h0_phi0_RW[idx] = obstructedSrc * bound;
}

#endif //APPLY_FIELDS